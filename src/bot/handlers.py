from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from telegram.constants import ParseMode

from src.config import logger
from src.data_store import chats_data, set_chat_session, get_chat_data
from src.bot.core import (
    generate_access_code,
    close_existing_session,
    add_message,
    telegram_bot,
)
from src.bot.keyboard import (
    markup,
    SESSION_START_BUTTON,
    SESSION_CLOSE_BUTTON,
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handles /start command. Sends greeting, generates code if needed, shows keyboard."""
    if not update.effective_user or not update.effective_chat:
        logger.warning("[start] Update is missing user or chat information.")
        return

    user = update.effective_user
    chat_id = update.effective_chat.id
    username = user.username or f"user_{user.id}"

    chat_info = get_chat_data(chat_id)
    access_code = chat_info.get("access_code") if chat_info else None

    if not access_code:
        logger.info(
            f"/start: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è @{username} (chat_id: {chat_id}). –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é."
        )
        access_code = generate_access_code()
        set_chat_session(chat_id, username, access_code)
        logger.info(
            f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ {access_code} –¥–ª—è @{username} (chat_id: {chat_id})"
        )
        await add_message(chat_id, "system", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥.")

        message_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.full_name}!\n\n"
            f"–Ø —Å–æ–∑–¥–∞–ª –¥–ª—è –≤–∞—Å —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>@{username}</code>\n"
            f"–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: <code>{access_code}</code>\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π."
        )
    else:
        chats_data[chat_id]["username"] = username
        logger.info(
            f"/start: –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è @{username} (chat_id: {chat_id}). –ö–æ–¥: {access_code}"
        )
        message_text = (
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}!\n\n"
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è:\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>@{username}</code>\n"
            f"–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: <code>{access_code}</code>\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É."
        )

    if update.message:
        await update.message.reply_html(message_text, reply_markup=markup)
    else:
        logger.warning(f"[start] No message found in update for chat_id {chat_id}")


async def start_new_session(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handles '–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é / –ù–æ–≤—ã–π –∫–æ–¥' button."""
    if not update.effective_user or not update.effective_chat:
        logger.warning(
            "[start_new_session] Update is missing user or chat information."
        )
        return

    user = update.effective_user
    chat_id = update.effective_chat.id
    username = user.username or f"user_{user.id}"

    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –æ—Ç @{username} (chat_id: {chat_id})")

    closed_old = await close_existing_session(chat_id)
    closed_message = "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ—Å—Å–∏—è (–µ—Å–ª–∏ –±—ã–ª–∞) –∑–∞–∫—Ä—ã—Ç–∞.\n" if closed_old else ""

    access_code = generate_access_code()
    set_chat_session(chat_id, username, access_code)
    logger.info(
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ù–û–í–´–ô –∫–æ–¥ {access_code} –¥–ª—è @{username} (chat_id: {chat_id})"
    )
    await add_message(
        chat_id, "system", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é."
    )

    message_text = (
        f"‚úÖ {closed_message}"
        f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:\n"
        f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>@{username}</code>\n"
        f"–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞: <code>{access_code}</code>"
    )

    if update.message:
        await update.message.reply_html(message_text, reply_markup=markup)
    else:
        logger.warning(
            f"[start_new_session] No message found in update for chat_id {chat_id}"
        )


async def close_session_command(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Handles '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é' button."""
    if not update.effective_user or not update.effective_chat:
        logger.warning(
            "[close_session_command] Update is missing user or chat information."
        )
        return

    user = update.effective_user
    chat_id = update.effective_chat.id
    username = user.username or f"user_{user.id}"

    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –æ—Ç @{username} (chat_id: {chat_id})")

    closed = await close_existing_session(chat_id)

    if closed:
        message_text = "‚úÖ –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–∞–π—Ç–æ–º –±—ã–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã."
        await add_message(
            chat_id, "system", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ—Å—Å–∏—é."
        )
    else:
        message_text = "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."

    if update.message:
        await update.message.reply_html(message_text, reply_markup=markup)
    else:
        logger.warning(
            f"[close_session_command] No message found in update for chat_id {chat_id}"
        )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handles regular text messages from the user."""
    if (
        not update.effective_user
        or not update.effective_chat
        or not update.message
        or not update.message.text
    ):
        logger.warning(
            "[handle_message] Update missing required information (user, chat, message, text)."
        )
        return

    user = update.effective_user
    chat_id = update.effective_chat.id
    text = update.message.text
    chat_info = get_chat_data(chat_id)
    username = chat_info.get("username") if chat_info else None
    access_code = chat_info.get("access_code") if chat_info else None

    if not username or not access_code:
        logger.info(
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ (chat_id: {chat_id}). –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å."
        )
        await update.message.reply_html(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–µ—Å—Å–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é / –ù–æ–≤—ã–π –∫–æ–¥', —á—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=markup,
        )
        return

    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} (chat_id: {chat_id}): {text}")
    await add_message(chat_id, "user", text)


def register_handlers(application: Application):
    """Registers all handlers with the application."""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(
        MessageHandler(
            filters.TEXT & filters.Regex(f"^{SESSION_START_BUTTON}$"), start_new_session
        )
    )
    application.add_handler(
        MessageHandler(
            filters.TEXT & filters.Regex(f"^{SESSION_CLOSE_BUTTON}$"),
            close_session_command,
        )
    )
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
